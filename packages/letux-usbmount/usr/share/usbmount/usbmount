#!/bin/bash
# This script mounts USB mass storage devices when they are plugged in
# and unmounts them when they are removed.
# Copyright © 2004, 2005 Martin Dickopp
# Copyright © 2008, 2009, 2010 Rogério Theodoro de Brito
# patches to use disk label as name: H. Nikolaus Schaller
#
# This file is free software; the copyright holder gives unlimited
# permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#

# ideas: get rid of the MOUNTPOINTS mechanism and always use LABEL or UUID
# improve code by functions to add() remove()
# streamline code style
# compare to https://serverfault.com/questions/766506/automount-usb-drives-with-systemd
# remove debugging code

[ "$DEVNAME" -a -x /bin/systemd ] && exit	# silently ignore call through udev if systemd available; there is another one

# set -e
exec > /dev/null 2>&1

# Auxiliary functions

# Log a string via the syslog facility.
log()
{
expr "$VERBOSE" : "[yY]" && echo $1 $2 >/dev/console
    if [ $1 != debug ] || expr "$VERBOSE" : "[yY]" > /dev/null; then
	logger -p user.$1 -t "usbmount[$$]" -- "$2"
    fi
}


# Test if the first parameter is in the list given by the second
# parameter.
in_list()
{
    for v in $2; do
	[ "$1" != "$v" ] || return 0
    done
    return 1
}

[ "$DEVNAME" ] || DEVNAME="/dev/$2"

######################################################################
# Main program

# Default values for configuration variables. Can be overwritten by usbmount.conf
ENABLED=1
MOUNTPOINTS=
MOUNTDIR="/media"	# could become /Volumes for QuantumSTEP
FILESYSTEMS=
MOUNTOPTIONS=
FS_MOUNTOPTIONS=
VERBOSE=no

if [ -r /etc/usbmount/usbmount.conf ]; then
    . /etc/usbmount/usbmount.conf
    log debug "loaded usbmount configurations"
fi

if [ "$DEVNAME" ]
then
	MOUNTDIR=$MOUNTDIR/${DEVNAME#/dev/}
	MOUNTDIR=${MOUNTDIR%%[0-9]}	# remove partition number(s)
	MOUNTDIR=${MOUNTDIR%p}		# remove partition infix "p" for mmcblk*p* devices
else
	MOUNTDIR=$MOUNTDIR/letux	# default
fi

log debug "DEVNAME=$DEVNAME MOUNTDIR=$MOUNTDIR $0 $*"

if [ "${ENABLED:-1}" -eq 0 ]; then
    log info "usbmount is disabled, see /etc/usbmount/usbmount.conf"
    exit 0
fi

if [ ! -x /sbin/blkid ]; then
    log err "cannot execute /sbin/blkid"
    exit 1
fi

# Per Policy 9.3.2, directories under /var/run have to be created
# after every reboot.
if [ ! -e /var/run/usbmount ]; then
    mkdir -p /var/run/usbmount
    log debug "creating /var/run/usbmount directory"
fi

umask 022

# note: there is no DEVINFO on unplug!!!

DEVINFO=$(/sbin/blkid -p $DEVNAME 2>/dev/null)
log debug "DEVINFO=$DEVINFO"

LABEL=$(echo "$DEVINFO" | fgrep -q "LABEL=" && echo "$DEVINFO" | sed 's/.*[[:blank:]]LABEL="\([^"]*\)".*/\1/g; s/[[:blank:]]*//g;')
UUID=$(echo "$DEVINFO" | fgrep -q "UUID=" && echo "$DEVINFO"   | sed 's/.*[[:blank:]]UUID="\([^"]*\)".*/\1/g; s/[[:blank:]]*//g;')
[ "$LABEL" ] || LABEL="$UUID"	# fall back
# note: labels should not contain / characters
log debug "label: $LABEL"

clean_dynamic () {
    # try to clean up stale partition directories from last mount
    for mount in "$MOUNTDIR/"*
    do
# cat /proc/mounts >/dev/console
# echo check for $mount >/dev/console
# ls -ld $mount >/dev/console
	if [ ! -d "$mount" ] || grep -q "^[^ ][^ ]* *$mount " /proc/mounts
	then # mountpoint does not exist or is currently mounted
# echo skip $mount >/dev/console
# ls -ld $mount >/dev/console
# grep "^[^ ][^ ]* */media/letux/rootfs" /proc/mounts >/dev/console
# echo mounts
# cat /proc/mounts >/dev/console
		continue
	fi
    	log debug "clean up $mount"
# FIXME: there may be false triggers since this is run again for all partitions
	rmdir "$mount" || log err "failed to clean $mount"	# should be empty - may contain subdirectories?
    done
    log debug "clean up $MOUNTDIR"
    rmdir "$MOUNTDIR" || log err "failed to clean $MOUNTDIR"
}

if [ "$1" = add ]; then

    # Acquire lock.
    log debug "trying to acquire lock /var/run/usbmount/.mount.lock"
    lockfile-create --retry 3 /var/run/usbmount/.mount || \
	{ log err "cannot acquire lock /var/run/usbmount/.mount.lock"; exit 1; }
    trap '( lockfile-remove /var/run/usbmount/.mount )' 0
    log debug "acquired lock /var/run/usbmount/.mount.lock"

    clean_dynamic

    if grep -q "^$DEVNAME " /proc/mounts
    then # add may be called multiple times on insertion
# grep "^$DEVNAME " /proc/mounts >/dev/console
	mountpoint=$(grep "^$DEVNAME " /proc/mounts | cut -d ' ' -f2)
	log debug "$DEVNAME is already mounted on $mountpoint"
	exit
    fi

    if [ "$LABEL" ]
    then # create dynamic mountpoint name
case "$LABEL" in
	*/* ) log err "invalid label: $LABEL"; log err "devinfo: $DEVINFO"; exit 1;;
esac
	mount="$MOUNTDIR/$LABEL"
	log debug "mounting $LABEL as $mount"
	if grep -q "^[^ ][^ ]* *$mount " /proc/mounts
	then
		dev=$(grep "^[^ ][^ ]* *$mount " /proc/mounts | cut -d ' ' -f1)
		log info "$mount already occupied by device $dev"
		umount $mount	# umount by mount point
		# IDEA: add some -1 -2 suffix
		# exit 1
	fi
	MOUNTPOINTS="$mount $MOUNTPOINTS"
	mkdir -p "$mount"
	chmod ugo-rwx "$mount"	# so that we can't write (unless we are root) if umount fails to remove it
    fi

    # Grab device information from device and "divide it"
    #   FIXME: improvement: implement mounting by label (notice that labels
    #   can contain spaces, which makes things a little bit less comfortable).
#    DEVINFO=$(/sbin/blkid -p $DEVNAME)
    FSTYPE=$(echo "$DEVINFO" | fgrep -q "TYPE=" && echo "$DEVINFO" | sed 's/.*[[:blank:]]TYPE="\([^"]*\)".*/\1/g; s/[[:blank:]]*//g;')
    USAGE=$(echo "$DEVINFO" | fgrep -q "USAGE=" && echo "$DEVINFO" | sed 's/.*[[:blank:]]USAGE="\([^"]*\)".*/\1/g; s/[[:blank:]]*//g;')
    if ! echo $USAGE | egrep -q "(filesystem|disklabel)"; then
	log info "$DEVNAME does not contain a filesystem or disklabel"
	exit 1
    fi

    # Try to use specifications in /etc/fstab first.
    if egrep -q "^[[:blank:]]*$DEVNAME" /etc/fstab; then
	log info "executing command: mount $DEVNAME"
	mount $DEVNAME || log err "mount by DEVNAME with $DEVNAME wasn't successful; return code $?"

    elif grep -q "^[[:blank:]]*UUID=$UUID" /etc/fstab; then
        log info "executing command: mount -U $UUID"
	mount -U $UUID || log err "mount by UUID with $UUID wasn't successful; return code $?"

    else
	log debug "$DEVNAME contains filesystem type $FSTYPE"

	fstype=$FSTYPE
	# Test if the filesystem type is in the list of filesystem
	# types to mount.
	if in_list "$fstype" "$FILESYSTEMS"; then
	    # Search an available mountpoint.
	    mountpoint=""
	    for v in $MOUNTPOINTS; do
		if [ -d "$v" ] && ! grep -q "^[^ ][^ ]* *$v " /proc/mounts
		then
		    mountpoint="$v"
		    log debug "mountpoint $mountpoint is available for $DEVNAME"
		    break
		fi
	    done
	    if [ -n "$mountpoint" ]; then
		# Determine mount options.
		options=
		for v in $FS_MOUNTOPTIONS; do
		    if expr "$v" : "-fstype=$fstype,."; then
			options="$(echo "$v" | sed 's/^[^,]*,//')"
			break
		    fi
		done
		if [ -n "$MOUNTOPTIONS" ]; then
		    options="$MOUNTOPTIONS${options:+,$options}"
		fi

		# Mount the filesystem.
		log info "executing command: mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint"

#		if [ "$(which pmount)" ]	# also available for jessie!
#		then
#			pmount "$DEVNAME" "$LABEL"
#		fi

# id >/dev/console
# which mount df >/dev/console
# echo "$0: running: mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint" >/dev/console

		if ! mount "-t$fstype" "${options:+-o$options}" "$DEVNAME" "$mountpoint"
		then
			echo "$0: failed: mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint" >/dev/console
			exit
		fi
# echo "$0: did run: mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint" >/dev/console

# df >/dev/console

		# Determine vendor and model.
		vendor=
		if [ -r "/sys$DEVPATH/device/vendor" ]; then
		    vendor="`cat \"/sys$DEVPATH/device/vendor\"`"
		elif [ -r "/sys$DEVPATH/../device/vendor" ]; then
		    vendor="`cat \"/sys$DEVPATH/../device/vendor\"`"
		elif [ -r "/sys$DEVPATH/device/../manufacturer" ]; then
		    vendor="`cat \"/sys$DEVPATH/device/../manufacturer\"`"
		elif [ -r "/sys$DEVPATH/../device/../manufacturer" ]; then
		    vendor="`cat \"/sys$DEVPATH/../device/../manufacturer\"`"
		fi
		vendor="$(echo "$vendor" | sed 's/^[[:blank:]]\+//; s/[[:blank:]]\+$//')"

		model=
		if [ -r "/sys$DEVPATH/device/model" ]; then
		    model="`cat \"/sys$DEVPATH/device/model\"`"
		elif [ -r "/sys$DEVPATH/../device/model" ]; then
		    model="`cat \"/sys$DEVPATH/../device/model\"`"
		elif [ -r "/sys$DEVPATH/device/../product" ]; then
		    model="`cat \"/sys$DEVPATH/device/../product\"`"
		elif [ -r "/sys$DEVPATH/../device/../product" ]; then
		    model="`cat \"/sys$DEVPATH/../device/../product\"`"
		fi
		model="$(echo "$model" | sed 's/^[[:blank:]]\+//; s/[[:blank:]]\+$//')"

# echo "$0: vendor=$vendor model=$model" >/dev/console

		# Run hook scripts; ignore errors.
		export UM_DEVICE="$DEVNAME"
		export UM_MOUNTPOINT="$mountpoint"
		export UM_FILESYSTEM="$fstype"
		export UM_MOUNTOPTIONS="$options"
		export UM_VENDOR="$vendor"
		export UM_MODEL="$model"
#		log info "executing command: run-parts /etc/usbmount/mount.d"
#		run-parts /etc/usbmount/mount.d || :
	    else
		# No suitable mount point found.
		log warning "no mountpoint found for $DEVNAME"
# grep "^[^ ][^ ]* *$v " /proc/mounts >/dev/console
# cat /proc/mounts  >/dev/console
		exit 1
	    fi
	fi
# df >/dev/console
    fi
elif [ "$1" = remove ]; then

    # A block or partition device has been removed.
    # Test if it is mounted.
    while read device mountpoint fstype remainder; do
# echo "$DEVNAME" = "$device" >/dev/console
	if [ "$DEVNAME" = "$device" ]; then
	    # If the mountpoint and filesystem type are maintained by
	    # this script, unmount the filesystem.
# echo "$mountpoint" "$MOUNTPOINTS" >/dev/console
	    if # in_list "$mountpoint" "$MOUNTPOINTS" &&
		in_list "$fstype" "$FILESYSTEMS"; then
		log info "executing command: umount -l $device"
		umount -l "$device"

		# Run hook scripts; ignore errors.
		export UM_DEVICE="$DEVNAME"
		export UM_MOUNTPOINT="$mountpoint"
		export UM_FILESYSTEM="$fstype"
#		log info "executing command: run-parts /etc/usbmount/umount.d"
#		run-parts /etc/usbmount/umount.d || :
	    fi
	    break
	fi
    done < /proc/mounts
    # delete (now) stale dynamic mountpoints
    clean_dynamic
else
    log err "unexpected: action '$1'"
    exit 1
fi

log debug "usbmount execution finished"
# df >/dev/console
# grep "/media/" /proc/mounts >/dev/console
